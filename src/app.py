import streamlit as st
import os
from dotenv import load_dotenv

# Path sorununu Ã§Ã¶zmek iÃ§in ana dizini PATH'e ekleyin
# Bu, "ModuleNotFoundError: No module named 'src'" hatasÄ±nÄ± engeller.
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Kendi modÃ¼llerimizi import ediyoruz
from src.ingest import chunk_text, load_text_files, load_pdfs
from src.indexer import build_vector_db
from src.rag_chain import answer_query
import chromadb

load_dotenv() 

# Veri setini bir kere yÃ¼kleyip indexlemek iÃ§in Streamlit cache kullanÄ±n
# Bu, her yenilemede indexleme iÅŸleminin tekrar yapÄ±lmasÄ±nÄ± Ã¶nler.
@st.cache_resource 
def process_and_index_data(folder_path="./data"):
    # TXT ve PDF dosyalarÄ±nÄ± yÃ¼kle
    all_docs = load_text_files(folder_path) + load_pdfs(folder_path)
    
    if not all_docs:
        st.error("Data klasÃ¶rÃ¼nde hiÃ§ veri bulunamadÄ±. LÃ¼tfen data/ klasÃ¶rÃ¼ne .txt veya .pdf dosyasÄ± ekleyin.")
        return None

    # TÃ¼m metinleri birleÅŸtir ve chunk'la
    full_text = "\n\n".join([doc["text"] for doc in all_docs])
    chunks = chunk_text(full_text)
    
    # ChromaDB'yi oluÅŸtur (Embedding ve Indexleme)
    collection = build_vector_db(chunks)
    return collection

# Ana Streamlit uygulamasÄ±
st.title("ğŸ’° Personal Budget Suggestions RAG AsistanÄ± (Gemini)")
st.markdown("---")

# 1. Veri YÃ¼kleme ve Indexleme (BaÅŸlangÄ±Ã§ta otomatik olarak Ã§alÄ±ÅŸÄ±r)
collection = process_and_index_data()

if collection:
    st.success(f"âœ… BÃ¼tÃ§e ve finansal veri kaynaklarÄ±nÄ±z ('data/' klasÃ¶rÃ¼nden) baÅŸarÄ±yla yÃ¼klendi ve indexlendi.")

    # 2. KullanÄ±cÄ± Sorgusu
    query = st.text_input("BÃ¼tÃ§eniz, tasarruflarÄ±nÄ±z veya borÃ§larÄ±nÄ±z hakkÄ±nda bir soru sorun:", 
                          placeholder="Ã–rneÄŸin: BorÃ§ yÃ¶netimi iÃ§in Kartopu yÃ¶ntemi ne zaman daha iyi bir stratejidir?")

    if st.button("ğŸ’¡ Ã–neri Al (RAG Sorgusu)"):
        if query:
            with st.spinner("YanÄ±t oluÅŸturuluyor... (Retrieval ve Gemini Generation)"):
                # RAG zincirini Ã§alÄ±ÅŸtÄ±r
                answer = answer_query(query, collection)
            
            st.markdown("---")
            st.markdown("### ğŸ’¬ **Asistan YanÄ±tÄ±**")
            st.write(answer)
        else:
            st.warning("LÃ¼tfen asistanÄ±n yanÄ±tlamasÄ± iÃ§in bir soru girin.")